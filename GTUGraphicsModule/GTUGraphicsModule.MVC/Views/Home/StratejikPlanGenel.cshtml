@{
    Layout = "~/Views/Shared/Layout.cshtml";
}


@model GTUGraphicsModule.Models.Models.ViewModels.PerformansGostergeVeriKategorisiBirimVM
@using Newtonsoft.Json;


<!DOCTYPE html>
<html lang="en">

<head>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link rel="stylesheet" href="~/css/StratejikPlanGenel.css">

    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.2.0/dist/chart.umd.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    
    <script src="https://rawgit.com/eKoopmans/html2pdf/master/dist/html2pdf.bundle.js"></script>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.3/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>


    <script src="~/js/stratejik_plan_genel.js"></script>

</head>


<body>

    <div class="inner-box">

        <div class="inner-selection">

            <div class="inner-head">
                <h3>YÖNETİCİ PANELİ</h3>
            </div>
            <div class="buttons">

                <button class="universite-button" onclick="showSection('universite-section', this)">Üniversite</button>
                <button class="secili-bolum-button" onclick="showSection('secili-bolum-section', this)">Seçili Bölüm</button>
                <button class="secili-konu-button" onclick="showSection('secili-konu-section', this)">Seçili Konu</button>

            </div>

        </div>

    

    <section id="universite-section">


            <div class="inner-section-layout">

                <div class="selections-container">

                </div>

                <div class="output-button-container">

                    <button class="pdf-button" id="pdfButton">Pdf</button>
                    <button class="excel-button" id="excelButton" onclick="exportToExcel()">Excel</button>

                </div>



            </div>

        <div class="box-container">

           
                

                <div id="pdf" class="box">

                <div class="point-chart-container">

                        <canvas id="lineChart" width="100" height="100"></canvas>

                </div>


                <div class="polar-area-chart-container">

                        <canvas id="polarChart" width="100" height="50" style="display: none;"></canvas>

                </div>
            
        
                
                <script>

                        var viewModel = @Html.Raw(JsonConvert.SerializeObject(Model.PerformansGostergeVeriKategorisiVMList));
                        initializeLineChart(viewModel);

                </script>

            </div>
                

        </div>


    </section>

    <section id="secili-bolum-section">

            <div class="option-panel">

                <div class="birim-container">


                    <div class="option">

                        <select id="birim-option">
                            <option value="" selected disabled>Birim</option>
                            @for (int i = 0; i < Model.Birimler.Count(); i++)
                            {
                                <option value="@Model.Birimler[i].Id">@Model.Birimler[i].BirimAdi</option>
                            }
                        </select>

                    </div>

                </div>


                <div class="button-container">

                    <button class="option-button" onclick="getSelectedOption()">Getir</button>

                </div>

            </div>


            <div id="birim-content-container">
                <!-- This is where the dynamic content will be rendered -->
            </div>

    </section>

        <section id="secili-konu-section">

            <div class="option-panel">

                <div class="birim-container">


                    <div class="option">

                        <select id="konu-option">
                            <option value="" selected disabled>Konu</option>
                            @for (int i = 0; i < Model.Konular.Count(); i++)
                            {
                                <option value="@Model.Konular[i].Id">@Model.Konular[i].KonuAdi</option>
                            }
                        </select>

                    </div>

                </div>


                <div class="button-container">

                    <button class="option-button" onclick="getSelectedOptionKonu()">Getir</button>

                </div>

            </div>


            <div id="konu-content-container">
                <!-- This is where the dynamic content will be rendered -->
            </div>

        </section>


    </div>




    <script>
        document.getElementById('pdfButton').addEventListener('click', function () {
            // Use html2pdf library to generate PDF
            var element = document.getElementById('pdf');
            html2pdf(element, {
                margin: 1, // Adjust margin as needed
                filename: 'chart.pdf',
                image: { type: 'jpeg', quality: 1 },
                html2canvas: { scale: 1 }, // Adjust scale as needed
                jsPDF: { format: 'a2', orientation: 'landscape' }
            });
        });
    </script>

    <script>

        function showSection(sectionId, button) {

            var sections = document.querySelectorAll('section');
            sections.forEach(function (section) {
                section.style.display = 'none';
            });

            var buttons = document.querySelectorAll('button');
            buttons.forEach(function (button) {
                button.style.borderBottomColor = "white";
            });

            var selectedSection = document.getElementById(sectionId);
            if (selectedSection) {

                selectedSection.style.display = 'block';
                button.style.borderBottomColor = "#008DC5";

            }

        }

    </script>

    <script>

        function getSelectedOption() {
            var selectedId = $("#birim-option").val();

            $.ajax({
            url: '/Home/BirimContentGenel/' + selectedId,
            type: 'GET',
            success: function (data) {
            // Update the content of the "selected-content-container" with the fetched data
            $('#birim-content-container').html(data);
            },
            error: function () {
            console.log('Error occurred while fetching data.');
            }
            });
        }
    
    </script>


     <script>

        function getSelectedOptionKonu() {
            var selectedId = $("#konu-option").val();

            $.ajax({
            url: '/Home/KonuContentGenel/' + selectedId,
            type: 'GET',
            success: function (data) {
            // Update the content of the "selected-content-container" with the fetched data
            $('#konu-content-container').html(data);
            },
            error: function () {
            console.log('Error occurred while fetching data.');
            }
            });
        }
    
    </script>
    
   <script>
    /*


        function generateExcel() {

            if (!Array.isArray(charts) || charts.length === 0) {
                console.error("No charts provided.");
                return;
            }

            // Create a workbook
            var workbook = new ExcelJS.Workbook();

            for (var i = 0; i < charts.length; i++) {
                var currentChart = charts[i];

                if (!currentChart || !currentChart.data) {
                    console.warn("Skipping invalid chart at index " + i);
                    continue;
                }

                var labels = currentChart.data.labels;
                var datasets = currentChart.data.datasets;

                // Add a worksheet for the current chart data
                var worksheet = workbook.addWorksheet('Chart ' + (i + 1) + ' Data');
                worksheet.addRow(['Labels'].concat(datasets.map(dataset => dataset.label)));

                for (var j = 0; j < labels.length; j++) {
                    worksheet.addRow([labels[j]].concat(datasets.map(dataset => dataset.data[j])));
                }
            }

            workbook.xlsx.writeBuffer().then(function (buffer) {
            var blob = new Blob([buffer], { type: 'application/octet-stream' });
            var link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = 'chart_data_with_chart.xlsx';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            });


            }

            /*
            if (!lineChart) {
      console.error("Line chart is not defined.");
      return;
    }
    console.log(lineChart);
            var labels = lineChart.data.labels;
            var datasets = lineChart.data.datasets;

            var dataRows = [labels];

            for (var i = 0; i < datasets.length; i++) {
                var dataset = datasets[i];
                if (dataset.data) {
                    dataRows.push(dataset.data);
                }
            }

        // Create a new workbook
        var workbook = XLSX.utils.book_new();
            var sheetData = [labels].concat(dataRows);

        // Add data to the worksheet
        var worksheet = XLSX.utils.aoa_to_sheet(sheetData);
        XLSX.utils.book_append_sheet(workbook, worksheet, "Chart Data");

        // Save the workbook as an Excel file
        XLSX.writeFile(workbook, "chart_data.xlsx");
      }
      */
    </script>


</body>


</html>
